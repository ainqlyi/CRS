// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CRS.AutomatedUiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Pau_Details")]
    public partial class Pau_DetailsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Pau_Details.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Pau_Details", "In order to verify that the PAU files were loaded correctly\r\nAs a verification\r\nI" +
                    " want to run tests on the Excel files and loaded table", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The loaded PAU table has the same number of total records as Excel files")]
        [NUnit.Framework.CategoryAttribute("AcceptanceTest")]
        public virtual void TheLoadedPAUTableHasTheSameNumberOfTotalRecordsAsExcelFiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The loaded PAU table has the same number of total records as Excel files", new string[] {
                        "AcceptanceTest"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the total number of records is calculated for all files in a directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("the total number of records queried in the database for table \'HSCRC_Insight.Fact" +
                    ".PAU_Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Then("the number of records in the database matches the number in the files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The loaded PAU table has the same number of IP records as Excel files")]
        [NUnit.Framework.CategoryAttribute("AcceptanceTest")]
        public virtual void TheLoadedPAUTableHasTheSameNumberOfIPRecordsAsExcelFiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The loaded PAU table has the same number of IP records as Excel files", new string[] {
                        "AcceptanceTest"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("the total number of IP records is calculated for all files in a directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.Given("the total number of IP records queried in the database for table \'HSCRC_Insight.F" +
                    "act.PAU_Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Then("the number of records in the database matches the number in the files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The loaded PAU table has the same number of OP records as Excel files")]
        [NUnit.Framework.CategoryAttribute("AcceptanceTest")]
        public virtual void TheLoadedPAUTableHasTheSameNumberOfOPRecordsAsExcelFiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The loaded PAU table has the same number of OP records as Excel files", new string[] {
                        "AcceptanceTest"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("the total number of OP records is calculated for all files in a directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.Given("the total number of OP records queried in the database for table \'HSCRC_Insight.F" +
                    "act.PAU_Details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.Then("the number of records in the database matches the number in the files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
